{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gnoos\\\\Documents\\\\GitHub\\\\imdb_clone\\\\src\\\\pages\\\\register\\\\register.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport './register.scss';\nimport { registerUser } from '../../actions/users';\nimport * as Yup from 'yup';\nconst RegisterSchema = Yup.object().shape({\n  name: Yup.string().min(3, \"Wpisz więcej niż 2 znaki\").max(32, \"Twoje imię i nazwisko jest za długie\").required(\"podaj imię i nazwisko\"),\n  email: Yup.string().required(\"Podaj adres email\").email(\"podany adres email jest nieprawidlowyy\"),\n  password: Yup.string().required(\"podaj hasło\").min(5, \"hasło musi być dłuższe niż 4 znaki\"),\n  repeatPassword: Yup.string().required(\"powtórz hasło\").oneOf([Yup.ref('password'), null], \"podane hasla są różne\")\n});\n\nclass RegisterPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getErrorMessages = (errors, key) => {\n      return errors[key] && errors[key].length > 0 && errors[key].map((serverError, index) => React.createElement(\"p\", {\n        key: index,\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, serverError));\n    };\n\n    this.getClientErrorMessages = (errors, touched, key) => {\n      return errors[key] && touched[key] && React.createElement(\"p\", {\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, errors[key]);\n    };\n\n    this.isSubmitButtonDisabled = (errors, touched) => {\n      const hasNoErrors = Object.keys(errors).length === 0;\n      const touchedValues = Object.values(touched);\n      const allWasTouched = touchedValues.length === 4 && touchedValues.every(value => value);\n      console.log(hasNoErrors, allWasTouched);\n      return !hasNoErrors || !allWasTouched;\n    };\n  }\n\n  //jak zrobic to zeby bez ostatniego toucha button przechodzil na true\n  render() {\n    const _this$props = this.props,\n          statusCode = _this$props.statusCode,\n          isLoading = _this$props.isLoading,\n          message = _this$props.message; //const statusCode = this.props.statusCode;\n\n    const registrationSuccessful = this.props.statusCode === 200 && !this.props.isLoading && this.props.message.length > 0;\n    const registrationFailed = statusCode === 422 && !isLoading;\n    const registrationError = statusCode > 400 && statusCode !== 422; // zatrzymuje wykonywanie kodu (jezeli mamy wlaczona konsole)\n    // debugger;\n    // debugger;\n\n    let serverErrors = [];\n\n    if (registrationFailed) {\n      for (let error in message) {\n        serverErrors = serverErrors.concat(message[error]);\n      }\n    } // console.log(message);\n    // console.log(serverErrors);\n\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        name: '',\n        email: '',\n        password: '',\n        repeatPassword: ''\n      },\n      validationSchema: RegisterSchema,\n      onSubmit: values => {\n        console.log(values);\n        const action = registerUser(values);\n        this.props.dispatch(action);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(Form, {\n      className: \"registration-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, registrationError && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Rejestracja nie powiod\\u0142a si\\u0119 z powodu b\\u0142\\u0119du serwera\"), registrationSuccessful && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \" \", this.props.message), registrationFailed && serverErrors.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.props.statusCode === 422 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Zarejestruj si\\u0119!\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Imi\\u0119 i nazwisko:\"), React.createElement(Field, {\n      name: \"name\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), this.getClientErrorMessages(errors, touched, 'name'), this.getErrorMessages(message, 'name')), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"E-mail:\"), React.createElement(Field, {\n      name: \"email\",\n      type: \"text\",\n      placeholder: \"Np. jan@kowalski.pl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), this.getClientErrorMessages(errors, touched, 'email'), this.getErrorMessages(message, 'email')), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Has\\u0142o:\"), React.createElement(Field, {\n      name: \"password\",\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), this.getClientErrorMessages(errors, touched, 'password'), this.getErrorMessages(message, 'password')), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Powt\\xF3rz has\\u0142o:\"), React.createElement(Field, {\n      name: \"repeatPassword\",\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), this.getClientErrorMessages(errors, touched, 'repeatPassword')), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: this.isSubmitButtonDisabled(errors, touched),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Zarejestruj si\\u0119\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.users.isLoading,\n    statusCode: state.users.statusCode,\n    message: state.users.message\n  };\n};\n\nexport default connect(mapStateToProps, null)(RegisterPage);","map":{"version":3,"sources":["C:\\Users\\gnoos\\Documents\\GitHub\\imdb_clone\\src\\pages\\register\\register.js"],"names":["React","Component","connect","Formik","Form","Field","registerUser","Yup","RegisterSchema","object","shape","name","string","min","max","required","email","password","repeatPassword","oneOf","ref","RegisterPage","getErrorMessages","errors","key","length","map","serverError","index","getClientErrorMessages","touched","isSubmitButtonDisabled","hasNoErrors","Object","keys","touchedValues","values","allWasTouched","every","value","console","log","render","props","statusCode","isLoading","message","registrationSuccessful","registrationFailed","registrationError","serverErrors","error","concat","action","dispatch","mapStateToProps","state","users"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport './register.scss';\r\nimport { registerUser } from '../../actions/users';\r\nimport * as Yup from 'yup';\r\n\r\nconst RegisterSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n  .min(3, \"Wpisz więcej niż 2 znaki\")\r\n  .max(32, \"Twoje imię i nazwisko jest za długie\")\r\n  .required(\"podaj imię i nazwisko\"),\r\n  email: Yup.string()\r\n  .required(\"Podaj adres email\")\r\n  .email(\"podany adres email jest nieprawidlowyy\"),\r\n  password: Yup.string().required(\"podaj hasło\")\r\n  .min(5, \"hasło musi być dłuższe niż 4 znaki\"),\r\n  repeatPassword: Yup.string()\r\n  .required(\"powtórz hasło\")\r\n  .oneOf(\r\n    [Yup.ref('password'), null],\r\n    \"podane hasla są różne\"\r\n  )\r\n})\r\n\r\n\r\nclass RegisterPage extends Component {\r\n  getErrorMessages = (errors, key) => \r\n  { \r\n    return errors[key] &&\r\n    errors[key].length > 0  &&\r\n    errors[key].map((serverError, index) => <p key={index} className=\"error-message\">{serverError}</p>)\r\n    }\r\n\r\n  getClientErrorMessages = (errors, touched, key) => {\r\n    \r\n    return  (errors[key] && touched[key]) &&\r\n      <p className='error-message'>\r\n        {errors[key]}\r\n      </p>\r\n  }\r\n\r\n  isSubmitButtonDisabled = (errors, touched) => {\r\n    const hasNoErrors = Object.keys(errors).length === 0;\r\n    const touchedValues = Object.values(touched);\r\n    const allWasTouched = touchedValues.length === 4 && touchedValues.every((value) => value)\r\n\r\n    console.log(hasNoErrors, allWasTouched);\r\n    return !hasNoErrors || !allWasTouched;\r\n  }\r\n  //jak zrobic to zeby bez ostatniego toucha button przechodzil na true\r\n  \r\n  render() {\r\n\r\n    const { statusCode, isLoading, message} = this.props;\r\n    //const statusCode = this.props.statusCode;\r\n\r\n    const registrationSuccessful = this.props.statusCode === 200 && !this.props.isLoading && this.props.message.length > 0;\r\n    const registrationFailed = statusCode === 422 && !isLoading;\r\n    const registrationError = statusCode > 400 && statusCode !== 422;\r\n\r\n    // zatrzymuje wykonywanie kodu (jezeli mamy wlaczona konsole)\r\n    // debugger;\r\n    // debugger;\r\n    let serverErrors = [];\r\n    \r\n    if (registrationFailed) {\r\n      for (let error in message) {\r\n        \r\n        serverErrors = serverErrors.concat(message[error]);\r\n      }\r\n    }\r\n    // console.log(message);\r\n    // console.log(serverErrors);\r\n    return (\r\n      <div className=\"container\">\r\n     \r\n\r\n        <Formik\r\n          initialValues={{\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: ''\r\n          }}\r\n          validationSchema={RegisterSchema}\r\n          onSubmit={(values) => {\r\n            console.log(values);\r\n            const action = registerUser(values);\r\n\r\n            this.props.dispatch(action);\r\n          }}\r\n        >\r\n          {\r\n            ({ errors, touched }) => (\r\n              <Form className=\"registration-form\">\r\n               {\r\n                  registrationError &&\r\n                  <div>Rejestracja nie powiodła się z powodu błędu serwera</div>\r\n                }\r\n                  {\r\n                    registrationSuccessful && <div> { this.props.message }</div>\r\n                  }\r\n                  {\r\n                    (registrationFailed && serverErrors.length > 0) &&\r\n                    <div>\r\n                      {this.props.statusCode === 422 &&\r\n                <div>\r\n                  {/* {\r\n                    serverErrors.map((serverError, index) => <p key={index} className=\"error-message\">{serverError}</p>)\r\n                    } */}\r\n\r\n                </div>\r\n            }\r\n          </div>\r\n        }\r\n                <div>\r\n                  <h2>Zarejestruj się!</h2>\r\n                  <div>\r\n                    <label>Imię i nazwisko:</label>\r\n                    <Field name=\"name\" type=\"text\" />\r\n                     {this.getClientErrorMessages(errors, touched, 'name')}\r\n\r\n                      {this.getErrorMessages(message, 'name')}\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label>E-mail:</label>\r\n                    <Field name=\"email\" type=\"text\" placeholder=\"Np. jan@kowalski.pl\" />\r\n                    {this.getClientErrorMessages(errors, touched, 'email')}\r\n                    {this.getErrorMessages(message, 'email')}\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label>Hasło:</label>\r\n                    <Field name=\"password\" type=\"password\" />\r\n                    {this.getClientErrorMessages(errors, touched, 'password')}\r\n                    {this.getErrorMessages(message, 'password')}\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label>Powtórz hasło:</label>\r\n                    <Field name=\"repeatPassword\" type=\"password\" />\r\n                    {this.getClientErrorMessages(errors, touched, 'repeatPassword')}\r\n                  </div>\r\n\r\n                  <button type=\"submit\" disabled={this.isSubmitButtonDisabled(errors, touched)}>Zarejestruj się</button>\r\n\r\n                </div>\r\n              </Form>\r\n\r\n            )\r\n          }\r\n\r\n        </Formik>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoading: state.users.isLoading,\r\n    statusCode: state.users.statusCode,\r\n    message: state.users.message,\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(RegisterPage); "]},"metadata":{},"sourceType":"module"}